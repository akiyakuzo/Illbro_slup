# skibidi_fixed.py
import os
import discord
from discord.ext import commands, tasks
from datetime import datetime, timezone
import sqlite3
from flask import Flask
from waitress import serve
from threading import Thread
import pathlib
import csv
import asyncio

# ===== Path cho DB n·∫±m trong repo =====
BASE_DIR = pathlib.Path(__file__).parent
DB_PATH = BASE_DIR / "inactivity.db"

# ===== Flask server cho Render (keep-alive) =====
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot ƒëang ch·∫°y!"

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    serve(app, host="0.0.0.0", port=port)

Thread(target=run_flask, daemon=True).start()
print("üü¢ Flask server ƒë√£ ch·∫°y qua waitress (daemon thread).")

# ===== H√†m t·∫°o k·∫øt n·ªëi DB thread-safe =====
def get_db_connection():
    # check_same_thread=False ƒë·ªÉ c√≥ th·ªÉ d√πng conn t·ª´ nhi·ªÅu thread (c·∫©n th·∫≠n khi d√πng)
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

# ===== T·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i =====
with get_db_connection() as conn:
    conn.execute("""
    CREATE TABLE IF NOT EXISTS inactivity (
        member_id TEXT PRIMARY KEY,
        guild_id TEXT,
        last_seen TEXT,
        role_added INTEGER DEFAULT 0
    )
    """)
print(f"üü¢ Database SQLite ƒë√£ s·∫µn s√†ng: {DB_PATH}")

# ===== C·∫•u h√¨nh bot (c√≥ th·ªÉ l·∫•y ROLE_NAME, INACTIVE_DAYS t·ª´ env n·∫øu mu·ªën) =====
TOKEN = os.getenv("TOKEN")
ROLE_NAME = os.getenv("ROLE_NAME", "üí§ T√≠n ƒê·ªì Ng·ªß ƒê√¥ng")
INACTIVE_DAYS = int(os.getenv("INACTIVE_DAYS", "30"))

intents = discord.Intents.default()
intents.members = True
intents.guilds = True
intents.presences = True
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# ===== Helper t·∫°o embed chu·∫©n =====
def make_embed(title: str, description: str = None, color: discord.Color = discord.Color.blue(), *, fields=None, footer=None):
    embed = discord.Embed(title=title, description=description or "", color=color, timestamp=datetime.now(timezone.utc))
    if fields:
        for name, value, inline in fields:
            embed.add_field(name=name, value=value, inline=inline)
    if footer:
        embed.set_footer(text=footer)
    return embed

# ===== FancyHelpCommand (gi·ªØ nguy√™n phong c√°ch nh∆∞ng ·ªïn h∆°n ch√∫t) =====
class FancyHelpCommand(commands.MinimalHelpCommand):
    async def send_bot_help(self, mapping):
        embed = discord.Embed(
            title="üìò H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Bot",
            description="D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c l·ªánh kh·∫£ d·ª•ng, chia theo nh√≥m:",
            color=discord.Color.blue()
        )

        bot_avatar = self.context.bot.user.avatar.url if self.context.bot.user and self.context.bot.user.avatar else None
        embed.set_thumbnail(url=bot_avatar or "https://files.catbox.moe/rvvejl.png")
        embed.set_image(url="https://moewalls.com/wp-content/uploads/2025/03/phoebe-sleeping-wuthering-waves-thumb.jpg")

        for cog, commands_list in mapping.items():
            filtered = await self.filter_commands(commands_list, sort=True)
            if not filtered:
                continue

            embed.add_field(
                name=f"‚öôÔ∏è {cog.qualified_name if cog else 'L·ªánh chung'}",
                value="\n".join(
                    f"**!{cmd.name}** ‚Äî {cmd.help or 'Kh√¥ng c√≥ m√¥ t·∫£'}"
                    for cmd in filtered
                ),
                inline=False
            )

        embed.set_footer(text="üí° D√πng !help <t√™n l·ªánh> ƒë·ªÉ xem chi ti·∫øt c·ª• th·ªÉ.")
        await self.get_destination().send(embed=embed)

    async def send_command_help(self, command):
        embed = discord.Embed(
            title=f"‚ùî Chi ti·∫øt l·ªánh: !{command.name}",
            color=discord.Color.green()
        )
        embed.add_field(name="üìÑ M√¥ t·∫£", value=command.help or "Kh√¥ng c√≥ m√¥ t·∫£", inline=False)
        embed.add_field(name="üì¶ C√∫ ph√°p", value=f"`!{command.name} {command.signature}`", inline=False)
        await self.get_destination().send(embed=embed)

# g√°n l·∫°i help command
bot.remove_command("help")
bot.help_command = FancyHelpCommand()

# =====================================================
# üí§ H√ÄM CH√çNH: Ki·ªÉm tra 1 l·∫ßn duy nh·∫•t (d√πng cho task & l·ªánh !runcheck)
# - M·ªü 1 connection DB cho to√†n b·ªô l∆∞·ª£t ki·ªÉm tra (kh√¥ng m·ªü/ƒë√≥ng t·ª´ng member)
# - B·ªçc try/except ƒë·ªÉ kh√¥ng l√†m d·ª´ng task
# =====================================================
async def check_inactivity_once(ctx=None, only_over_30=False):
    now = datetime.now(timezone.utc)
    print(f"üîç [{now.isoformat()}] B·∫Øt ƒë·∫ßu ki·ªÉm tra th√†nh vi√™n kh√¥ng ho·∫°t ƒë·ªông...")
    total_checked = 0
    total_updated = 0
    total_role_added = 0

    try:
        # M·ªü 1 connection cho to√†n b·ªô check
        conn = get_db_connection()
        c = conn.cursor()

        for guild in bot.guilds:
            role = discord.utils.get(guild.roles, name=ROLE_NAME)
            if not role:
                print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y role '{ROLE_NAME}' trong server '{guild.name}'")
                continue

            for member in guild.members:
                if member.bot:
                    continue

                total_checked += 1

                try:
                    # L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i
                    c.execute("SELECT last_seen, role_added FROM inactivity WHERE member_id=?", (str(member.id),))
                    row = c.fetchone()
                    last_seen, role_added = (row["last_seen"], row["role_added"]) if row else (None, 0)

                    # C·∫≠p nh·∫≠t n·∫øu offline (ghi th·ªùi ƒëi·ªÉm hi·ªán t·∫°i)
                    if str(member.status) == "offline":
                        c.execute("""
                            INSERT INTO inactivity (member_id, guild_id, last_seen, role_added)
                            VALUES (?, ?, ?, ?)
                            ON CONFLICT(member_id) DO UPDATE SET last_seen=excluded.last_seen
                        """, (str(member.id), str(guild.id), datetime.now(timezone.utc).isoformat(), role_added))
                        total_updated += 1

                    # G√°n role n·∫øu ƒë·ªß ng∆∞·ª°ng
                    if last_seen:
                        try:
                            last_seen_dt = datetime.fromisoformat(last_seen) if isinstance(last_seen, str) else last_seen
                        except Exception:
                            # fallback n·∫øu format kh√°c
                            last_seen_dt = datetime.now(timezone.utc)
                        days_offline = (now - last_seen_dt).days
                        if days_offline >= INACTIVE_DAYS and role_added == 0:
                            if only_over_30 and days_offline < INACTIVE_DAYS:
                                pass
                            else:
                                try:
                                    await member.add_roles(role)
                                    c.execute("UPDATE inactivity SET role_added=1 WHERE member_id=?", (str(member.id),))
                                    total_role_added += 1
                                    print(f"‚úÖ G√°n role '{ROLE_NAME}' cho {member.name} ({days_offline} ng√†y offline)")
                                except discord.Forbidden:
                                    print(f"üö´ Kh√¥ng ƒë·ªß quy·ªÅn ƒë·ªÉ g√°n role cho {member.name}")
                                except Exception as e:
                                    print(f"‚ö†Ô∏è L·ªói khi g√°n role cho {member.name}: {e}")

                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói v·ªõi member {getattr(member, 'name', 'unknown')}: {e}")

                # Gi·∫£i ph√≥ng event loop nh·∫π ƒë·ªÉ tr√°nh block l√¢u (khi guild r·∫•t l·ªõn)
                if total_checked % 100 == 0:
                    await asyncio.sleep(0.1)

        # commit 1 l·∫ßn sau khi xong
        conn.commit()
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói trong check_inactivity_once: {e}")
    finally:
        try:
            conn.close()
        except Exception:
            pass

    finished_ts = datetime.now(timezone.utc).isoformat()
    print(f"‚úÖ [{finished_ts}] Ho√†n t·∫•t ki·ªÉm tra! Checked={total_checked} Updated={total_updated} RolesAdded={total_role_added}")

    # n·∫øu c√≥ ctx (l·ªánh), g·ª≠i embed t√≥m t·∫Øt
    if ctx:
        embed = make_embed(
            title="‚úÖ Ho√†n t·∫•t ki·ªÉm tra Inactivity",
            description=f"Th·ªùi gian: `{finished_ts}`",
            color=discord.Color.green(),
            fields=[
                ("üßæ T·ªïng ki·ªÉm tra", str(total_checked), True),
                ("üîÑ C·∫≠p nh·∫≠t last_seen", str(total_updated), True),
                ("‚úÖ G√°n role", str(total_role_added), True)
            ],
            footer="S·ª≠ d·ª•ng !recheck30days ƒë·ªÉ ch·ªâ ki·ªÉm tra nh·ªØng ng∆∞·ªùi ƒë√£ >= INACTIVE_DAYS"
        )
        await ctx.send(embed=embed)

# ===== Task ƒë·ªãnh k·ª≥ (24h) - b·ªçc try/except ƒë·ªÉ kh√¥ng d·ª´ng =====
@tasks.loop(hours=24)
async def check_inactivity():
    try:
        await check_inactivity_once()
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói trong task check_inactivity: {e}")

# =====================================================
# ‚öôÔ∏è C√ÅC L·ªÜNH - d√πng embed cho ph·∫£n h·ªìi
# =====================================================
@bot.command()
async def test(ctx):
    embed = make_embed(
        title="üß™ Bot Test",
        description="‚úÖ Bot ƒëang ho·∫°t ƒë·ªông v√† s·∫Ω ki·ªÉm tra inactivities m·ªói 24 gi·ªù.",
        color=discord.Color.green(),
        fields=[("üïì L·ªãch ki·ªÉm tra", "24 gi·ªù/l·∫ßn", True)],
        footer="N·∫øu mu·ªën ch·∫°y ngay, d√πng !runcheck"
    )
    embed.set_thumbnail(url="https://files.catbox.moe/rvvejl.png")
    await ctx.send(embed=embed)

@bot.command()
@commands.has_permissions(administrator=True)
async def runcheck(ctx):
    """Ch·∫°y ki·ªÉm tra inactivity ngay l·∫≠p t·ª©c"""
    pre = make_embed(
        title="üîé B·∫Øt ƒë·∫ßu ki·ªÉm tra th·ªß c√¥ng...",
        description="Bot ƒëang qu√©t c√°c th√†nh vi√™n. Vui l√≤ng ch·ªù...",
        color=discord.Color.blue()
    )
    await ctx.send(embed=pre)
    await check_inactivity_once(ctx)
    done = make_embed(
        title="‚úÖ Ho√†n t·∫•t ki·ªÉm tra th·ªß c√¥ng",
        description="K·∫øt qu·∫£ ƒë√£ g·ª≠i ·ªü tr√™n.",
        color=discord.Color.green()
    )
    await ctx.send(embed=done)

@bot.command()
@commands.has_permissions(administrator=True)
async def recheck30days(ctx):
    """Ki·ªÉm tra l·∫°i nh·ªØng ng∆∞·ªùi ƒë√£ offline ƒë·ªß INACTIVE_DAYS"""
    pre = make_embed(
        title="üîÅ Ki·ªÉm tra nh·ªØng member ƒë√£ offline >= INACTIVE_DAYS",
        description=f"Ng∆∞·ª°ng: {INACTIVE_DAYS} ng√†y",
        color=discord.Color.blue()
    )
    await ctx.send(embed=pre)
    await check_inactivity_once(ctx, only_over_30=True)
    done = make_embed(
        title="‚úÖ Ho√†n t·∫•t ki·ªÉm tra l·∫°i",
        description="ƒê√£ ho√†n t·∫•t ki·ªÉm tra nh·ªØng ng∆∞·ªùi ƒë√£ offline ƒë·ªß ng∆∞·ª°ng.",
        color=discord.Color.green()
    )
    await ctx.send(embed=done)

@bot.command()
@commands.has_permissions(administrator=True)
async def exportdb(ctx):
    """G·ª≠i file inactivity.db l√™n k√™nh Discord"""
    if os.path.exists(DB_PATH):
        embed = make_embed(title="üìÅ Export Database", description="ƒêang g·ª≠i file inactivity.db", color=discord.Color.green())
        await ctx.send(embed=embed)
        await ctx.send(file=discord.File(DB_PATH))
    else:
        await ctx.send(embed=make_embed(title="‚ùå L·ªói", description="Kh√¥ng t√¨m th·∫•y file database.", color=discord.Color.red()))

@bot.command()
@commands.has_permissions(administrator=True)
async def exportcsv(ctx):
    """Xu·∫•t database inactivity th√†nh file CSV c√≥ t√™n ng∆∞·ªùi d√πng"""
    csv_path = BASE_DIR / "inactivity_export.csv"

    if not os.path.exists(DB_PATH):
        await ctx.send(embed=make_embed(title="‚ùå L·ªói", description="Kh√¥ng t√¨m th·∫•y file database.", color=discord.Color.red()))
        return

    try:
        conn = get_db_connection()
        rows = conn.execute("SELECT member_id, guild_id, last_seen, role_added FROM inactivity").fetchall()
        conn.close()

        if not rows:
            await ctx.send(embed=make_embed(title="‚ö†Ô∏è Database tr·ªëng", description="Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.", color=discord.Color.orange()))
            return

        with open(csv_path, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["member_id", "member_name", "guild_id", "last_seen", "role_added"])
            for row in rows:
                guild = bot.get_guild(int(row["guild_id"])) if row["guild_id"] else None
                member = guild.get_member(int(row["member_id"])) if guild else None
                member_name = f"{member.name}#{member.discriminator}" if member else "Kh√¥ng t√¨m th·∫•y"
                writer.writerow([row["member_id"], member_name, row["guild_id"], row["last_seen"], row["role_added"]])

        embed = make_embed(title="‚úÖ ƒê√£ xu·∫•t CSV", description="G·ª≠i file CSV k√®m t√™n ng∆∞·ªùi d√πng.", color=discord.Color.green())
        await ctx.send(embed=embed, file=discord.File(csv_path))
    except Exception as e:
        await ctx.send(embed=make_embed(title="‚ö†Ô∏è L·ªói khi xu·∫•t CSV", description=str(e), color=discord.Color.red()))
    finally:
        try:
            if os.path.exists(csv_path):
                os.remove(csv_path)
        except Exception:
            pass

# ===== Command: list offline members (hi·ªÉn th·ªã s·ªë ng√†y offline) =====
@bot.command()
async def list_off(ctx):
    guild = ctx.guild
    role = discord.utils.get(guild.roles, name=ROLE_NAME)
    if not role:
        await ctx.send(embed=make_embed(title="‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y role", description=f"Role '{ROLE_NAME}' kh√¥ng t·ªìn t·∫°i.", color=discord.Color.orange()))
        return

    conn = get_db_connection()
    rows = conn.execute("SELECT member_id, last_seen FROM inactivity WHERE guild_id=?", (str(guild.id),)).fetchall()
    conn.close()

    now = datetime.now(timezone.utc)
    results = []
    for row in rows:
        try:
            member = guild.get_member(int(row["member_id"]))
            if not member or member.bot or str(member.status) != "offline":
                continue
            last_seen = row["last_seen"]
            if not last_seen:
                continue
            last_seen_dt = datetime.fromisoformat(last_seen) if isinstance(last_seen, str) else last_seen
            days_offline = (now - last_seen_dt).days
            if days_offline >= 1:
                results.append(f"‚Ä¢ {member.name}#{member.discriminator} ‚Äî üïì {days_offline} ng√†y")
        except Exception:
            continue

    if results:
        # n·∫øu d√†i qu√°, chia trang (gi·ªØ ƒë∆°n gi·∫£n: g·ª≠i t·∫•t c·∫£)
        embed = make_embed(title="üìã Danh s√°ch member offline", description="\n".join(results[:25]), color=discord.Color.gold())
        embed.set_footer(text=f"T·ªïng: {len(results)} ng∆∞·ªùi. Hi·ªÉn th·ªã t·ªëi ƒëa 25.")
        await ctx.send(embed=embed)
    else:
        await ctx.send(embed=make_embed(title="‚úÖ Kh√¥ng c√≥ member offline l√¢u", description="Kh√¥ng c√≥ member n√†o ƒëang offline >= 1 ng√†y.", color=discord.Color.green()))

@bot.command()
@commands.has_permissions(manage_roles=True)
async def removerole(ctx, member: discord.Member):
    guild = ctx.guild
    role = discord.utils.get(guild.roles, name=ROLE_NAME)
    if not role:
        await ctx.send(embed=make_embed(title="‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y role", description=f"Role '{ROLE_NAME}' kh√¥ng t·ªìn t·∫°i.", color=discord.Color.orange()))
        return
    try:
        await member.remove_roles(role)
        conn = get_db_connection()
        conn.execute("UPDATE inactivity SET role_added=0 WHERE member_id=?", (str(member.id),))
        conn.commit()
        conn.close()
        await ctx.send(embed=make_embed(title="‚úÖ G·ª° role", description=f"ƒê√£ g·ª° role '{ROLE_NAME}' cho {member.name}#{member.discriminator}", color=discord.Color.green()))
    except Exception as e:
        await ctx.send(embed=make_embed(title="‚ö†Ô∏è L·ªói khi g·ª° role", description=str(e), color=discord.Color.red()))

# ===== Event: bot ready =====
@bot.event
async def on_ready():
    print(f"ü§ñ Bot {bot.user} ƒë√£ online!")
    await bot.change_presence(activity=discord.Game("Theo d√µi t√≠n ƒë·ªì üò¥"))
    if not check_inactivity.is_running():
        check_inactivity.start()
        print("üü¢ Task check_inactivity ƒë√£ ƒë∆∞·ª£c start")

# ===== Run bot =====
if TOKEN:
    print("üü¢ B·∫Øt ƒë·∫ßu ch·∫°y bot...")
    bot.run(TOKEN)
else:
    print("‚ùå Kh√¥ng t√¨m th·∫•y TOKEN trong bi·∫øn m√¥i tr∆∞·ªùng!")
